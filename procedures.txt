3.1.3.1 Procedure for inserting new driver
DELIMITER  $
CREATE PROCEDURE newDriver(IN dr_id CHAR(10), IN dr_name VARCHAR(20), IN dr_lname VARCHAR(20), IN salary FLOAT(7,2), IN licence ENUM('A','B','C','D'), IN route ENUM('LOCAL','ABROAD'), IN exp TINYINT(4))
BEGIN
DECLARE drivers_id CHAR(10);
DECLARE target_branch INT(11);

SELECT d.drv_AT INTO drivers_id FROM driver AS d WHERE d.drv_AT=dr_id;

IF (drivers_id is NULL) THEN
SELECT subquery.wrk_br_code INTO target_branch
FROM (SELECT w.wrk_br_code, COUNT(*) AS num_drivers FROM driver AS d INNER JOIN worker AS w ON d.drv_AT=w.wrk_AT GROUP BY w.wrk_br_code ORDER BY num_drivers ASC,w.wrk_br_code ASC LIMIT 1) AS subquery;
	IF (target_branch is NULL) THEN
	SELECT 'ERROR';
	ELSE
	INSERT INTO worker VALUES (dr_id,dr_name,dr_lname,salary,target_branch);
	INSERT INTO driver VALUES (dr_id,licence,route,exp);
	END IF;
END IF;
END$
DELIMITER ;

3.1.3.2 Procedure for getting info for all trips of a branch
όρισμα ο κωδικός ενός υποκαταστήματος και δύο ημερομηνίες

Για τα ταξίδια (trip) που διοργανώνονται από το 
υποκατάστημα του οποίου δόθηκε ο κωδικός, και των οποίων η ημερομηνία αναχώρησης 
είναι μέσα στο διάστημα που δόθηκε, θα επιστρέφονται τα εξής:
Κόστος ταξιδιού (tr_cost ), μέγιστες θέσεις maxseat, σύνολο κρατήσεων (reservations), 
κενές θέσεις (maxseat – σύνολο κρατήσεων), επώνυμο και όνομα οδηγού και ξεναγού, 
ημερομηνία αναχώρησης και επιστροφής.

select tr_id,tr_departure,tr_return,tr_br_code from trip
where tr_br_code=1111 and tr_departure>='2023-01-01' and tr_return<='2024-01-01';

SELECT t.tr_id, t.attribute1, t.attribute2, t.attribute3, o.attribute4, r.attribute5
FROM trip AS t
INNER JOIN other_table1 AS o ON t.tr_id = o.tr_id
INNER JOIN other_table2 AS r ON t.tr_id = r.tr_id
WHERE t.tr_br_code = 'specific_br_code'
    AND t.tr_date BETWEEN 'start_date' AND 'end_date';

SELECT t.tr_cost,t.tr_maxseats,MAX(r.res_seatnum),w.wrk_name,w.wrk_lname,w.wrk_name,w.wrk_lname,t.tr_departure,t.tr_return
FROM trip AS t
INNER JOIN reservation AS r ON r.res_tr_id=t.tr_id
INNER JOIN driver AS d ON d.drv_AT=t.tr_drv_AT
INNER JOIN worker AS w ON w.wrk_AT=d.drv_AT
INNER JOIN guide AS g ON g.gui_AT=t.tr_gui_AT
INNER JOIN worker AS a ON a.wrk_AT=g.gui_AT
WHERE t.tr_br_code=1111 AND t.tr_departure BETWEEN '2023-01-01' AND '2024-01-01';


/* Testing code */
CALL newDriver('AT073','Nikos','Kapolas',5000.50,'A','ABROAD',14);

SELECT w.wrk_br_code,count(*) AS num_drivers FROM driver AS d
INNER JOIN worker AS w ON d.drv_AT=w.wrk_AT GROUP BY w.wrk_br_code ORDER BY num_drivers ASC;

SELECT w.wrk_br_code,count(*) 
FROM driver AS d INNER JOIN worker AS w ON d.drv_AT=w.wrk_AT GROUP BY w.wrk_br_code ORDER BY  ASC LIMIT 1;

drop procedure newDriver;
delete from worker where wrk_AT='AT072';
