3.1.3.1 Procedure for inserting new driver

DELIMITER  $
CREATE PROCEDURE newDriver(IN dr_id CHAR(10), IN dr_name VARCHAR(20), IN dr_lname VARCHAR(20), IN salary FLOAT(7,2), IN licence ENUM('A','B','C','D'), IN route ENUM('LOCAL','ABROAD'), IN exp TINYINT(4))
BEGIN
	DECLARE drivers_id CHAR(10);
	DECLARE target_branch INT(11);

	SELECT d.drv_AT INTO drivers_id 
	FROM driver AS d 
	WHERE d.drv_AT=dr_id;

	IF (drivers_id is NULL) THEN
		SELECT subquery.wrk_br_code INTO target_branch
		FROM (SELECT w.wrk_br_code, COUNT(*) AS num_drivers FROM driver AS d INNER JOIN worker AS w ON d.drv_AT=w.wrk_AT GROUP BY w.wrk_br_code ORDER BY num_drivers ASC,w.wrk_br_code ASC LIMIT 1) AS subquery;
		IF (target_branch is NULL) THEN
		SELECT 'ERROR';
		ELSE
		INSERT INTO worker VALUES (dr_id,dr_name,dr_lname,salary,target_branch);
		INSERT INTO driver VALUES (dr_id,licence,route,exp);
		END IF;
	END IF;
END$
DELIMITER ;

3.1.3.2 Procedure for getting info for all trips of a branch 

-> Να κάνω έλεγχο οτι η δεύτερη ημερομηνία είναι μεγαλύτερη της πρώτης

DELIMITER $
CREATE PROCEDURE get_trip_info(IN branch INT(11),IN from_date DATETIME,IN to_date DATETIME)
BEGIN
	DECLARE cost FLOAT(7,2);
	DECLARE capacity TINYINT(4);
	DECLARE reservations TINYINT(4);
	DECLARE driver_name VARCHAR(20);
	DECLARE driver_lname VARCHAR(20);
	DECLARE guide_name VARCHAR(20);
	DECLARE guide_lname VARCHAR(20);
	DECLARE departure DATETIME;
	DECLARE return_date DATETIME;

	DECLARE finishedFlag INT;
	DECLARE tripCursor CURSOR FOR
		SELECT t.tr_cost,t.tr_maxseats,MAX(r.res_seatnum),w.wrk_name,w.wrk_lname,w2.wrk_name,w2.wrk_lname,t.tr_departure,t.tr_return 			FROM trip AS t
		INNER JOIN reservation AS r ON r.res_tr_id=t.tr_id
		INNER JOIN driver AS d ON d.drv_AT=t.tr_drv_AT
		INNER JOIN guide AS g ON g.gui_AT=t.tr_gui_AT
		INNER JOIN worker AS w ON w.wrk_AT=d.drv_AT
		INNER JOIN worker AS w2 ON w2.wrk_AT=g.gui_AT
		WHERE t.tr_br_code=branch AND (t.tr_departure>=from_date AND t.tr_departure<=to_date) GROUP BY r.res_tr_id;
	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finishedFlag=1;

	OPEN tripCursor;
	SET finishedFlag=0;
	FETCH tripCursor INTO cost,capacity,reservations,driver_name,driver_lname,guide_name,guide_lname,departure,return_date;

	WHILE (finishedFlag=0) DO
		SELECT cost AS 'Trip Cost',capacity AS '#Seats',reservations AS '#Researved Seats',(capacity-reservations) AS '#Empty Seats',driver_name AS 'Driver Name',driver_lname AS 'Driver Last Name',guide_name AS 'Guide Name',guide_lname AS 'Guide Last Name',departure AS 'Departure Date',return_date AS 'Return Date';
		
		FETCH tripCursor INTO cost,capacity,reservations,driver_name,driver_lname,guide_name,guide_lname,departure,return_date;
	END WHILE;
	CLOSE tripCursor;
END$

3.1.3.3 Procedure for removing an admin worker if he is not a manager
// Κάνουμε την παραδοχή οτι κάθε worker που ανήκει στο admin προσωπικό με τύπο 'ADMINISTRATIVE', θα διοικεί και ένα απο τα υποκαταστήματα, σε αντίθεση με τους driver,guide οι οποίοι μπορεί να μην ορίζονται σε κάποιο ταξίδι απαραίτητα.

DELIMITER $
CREATE PROCEDURE del_admin(IN name VARCHAR(20),IN lname VARCHAR(20))
BEGIN
	DECLARE admin_id CHAR(10);
	DECLARE admin_property ENUM('LOGISTICS','ADMINISTRATIVE','ACCOUNTING');
	DECLARE found BOOLEAN DEFAULT FALSE;

	SELECT w.wrk_AT,a.adm_type INTO admin_id,admin_property 
	FROM worker AS w 
	INNER JOIN admin AS a ON a.adm_AT=w.wrk_AT 
	WHERE w.wrk_name=name and w.wrk_lname=lname;

	IF (admin_id IS NOT NULL) THEN
		SET found = TRUE;
		IF (admin_property='ADMINISTRATIVE') THEN
			SELECT 'Selected person is branch manager. Deletion of a branch manager is not permitted' AS message;
		ELSE
			DELETE FROM worker WHERE wrk_AT=admin_id;
			SELECT 'Person successfully deleted' AS message;
		END IF;
	END IF;

	IF(NOT found) THEN
		SELECT 'Person not found' AS message;
	END IF;
END$
DELIMITER ;

3.1.3.4
α) Προσθέσαμε να επιστρέφει και τον κωδικό κράτησης για καλύτερη αναγνωσιμότητα
DELIMITER $
CREATE PROCEDURE get_Res_Offers_Names(IN from_amount FLOAT,IN to_amount FLOAT)
BEGIN
	SELECT res_offer_code,cust_name AS 'Customer Name',cust_lname AS 'Customer Last Name'
	FROM reservation_offers_memory
	WHERE advance_fee>=from_amount AND advance_fee<=to_amount
	ORDER BY res_offer_code;
END $

DELIMITER ;

β)
DELIMITER $

CREATE PROCEDURE get_Offers_Participation(IN input_last_name VARCHAR(20))
BEGIN
  DECLARE total_count INT;
  
  SELECT COUNT(*) INTO total_count
  FROM reservation_offers_memory
  WHERE cust_lname = input_last_name;
  IF total_count=1 THEN
    SELECT cust_name, cust_lname, trip_offer_code
    FROM reservation_offers_memory
    WHERE cust_lname = input_last_name;
  ELSE
	SELECT r.cust_name,r.cust_lname,r.trip_offer_code,grouped.total
	FROM reservation_offers_memory r 
	RIGHT JOIN (SELECT COUNT(*) AS total,cust_lname AS lname FROM reservation_offers_memory
	WHERE cust_lname=input_last_name GROUP BY trip_offer_code) AS grouped 
	ON r.cust_lname=grouped.lname
	ORDER BY r.trip_offer_code;
  END IF;

END $

DELIMITER ;

// Procedure that takes as argument a workers AT who has been blacklisted and delete that worker and clear his misconducts records

DELIMITER $

CREATE PROCEDURE delete_worker(IN wrkAT CHAR(10))
BEGIN
	DECLARE drvAT CHAR(10);
	DECLARE guiAT CHAR(10);
	DECLARE newGuide CHAR(10);
	DECLARE newDriver CHAR(10);
	DECLARE existsInTrip INT;

	SELECT COUNT(*) INTO existsInTrip FROM trip WHERE tr_gui_AT=wrkAT OR tr_drv_AT=wrkAT;
	
	IF existsInTrip>0 THEN
		SELECT drv_AT INTO drvAT FROM driver WHERE drv_AT=wrkAT;
		SELECT gui_AT INTO guiAT FROM guide WHERE gui_AT=wrkAT;

		IF(drvAT IS NULL) THEN 
			SELECT w.wrk_AT INTO newGuide FROM worker w LEFT JOIN guide g on w.wrk_AT=g.gui_AT WHERE (g.gui_AT IS NOT NULL) AND w.wrk_AT NOT IN (SELECT tr_gui_AT FROM trip) LIMIT 0,1;
		
			IF(newGuide IS NOT NULL) THEN
				UPDATE trip SET tr_gui_AT=newGuide WHERE tr_gui_AT=wrkAT;
				DELETE FROM misconducts WHERE msc_wrk_AT=wrkAT;
				DELETE FROM worker WHERE wrk_AT=wrkAT;
			END IF;
		ELSEIF(guiAT IS NULL) THEN
			SELECT w.wrk_AT INTO newDriver FROM worker w LEFT JOIN driver d on w.wrk_AT=d.drv_AT WHERE (d.drv_AT IS NOT NULL) AND w.wrk_AT NOT IN (SELECT tr_drv_AT FROM trip) LIMIT 0,1;
		
			IF(newDriver IS NOT NULL) THEN
				UPDATE trip SET tr_drv_AT=newDriver WHERE tr_drv_AT=wrkAT;
				DELETE FROM misconducts WHERE msc_wrk_AT=wrkAT;
				DELETE FROM worker WHERE wrk_AT=wrkAT;
			END IF;
		END IF;
	ELSE
		DELETE FROM misconducts WHERE msc_wrk_AT=wrkAT;
		DELETE FROM worker WHERE wrk_AT=wrkAT;
	END IF;
	
END $

DELIMITER ;