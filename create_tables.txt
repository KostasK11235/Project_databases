# cross check again

CREATE TABLE branch(
br_code INT(11) NOT NULL AUTO_INCREMENT,
br_street VARCHAR(30) NOT NULL,
br_num INT(4) NOT NULL,
br_city VARCHAR(30) NOT NULL,
PRIMARY KEY(br_code));

CREATE TABLE worker(
wrk_AT CHAR(10) NOT NULL,
wrk_name VARCHAR(20) NOT NULL,
wrk_lname VARCHAR(20) NOT NULL,
wrk_salary FLOAT(7,2) NOT NULL,
wrk_br_code INT(11) NOT NULL,
PRIMARY KEY (wrk_AT),
FOREIGN KEY (wrk_br_code) REFERENCES branch (br_code)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE manages(
mng_adm_AT CHAR(10) NOT NULL,
mng_br_code INT(11) NOT NULL,
PRIMARY KEY(mng_adm_AT,mng_br_code),
FOREIGN KEY (mng_adm_AT) REFERENCES admin (adm_AT)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (mng_br_code) REFERENCES branch (br_code)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE phones(
ph_br_code INT(11) NOT NULL,
ph_number CHAR(10) NOT NULL,
PRIMARY KEY(ph_br_code,ph_number),
FOREIGN KEY (ph_br_code) REFERENCES branch (br_code)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE driver(
drv_AT CHAR(10) NOT NULL,
drv_license ENUM('A','B','C','D') NOT NULL,
drv_route ENUM('LOCAL','ABROAD') NOT NULL,
drv_experience TINYINT(4) DEFAULT 0,
PRIMARY KEY(drv_AT),
FOREIGN KEY(drv_AT) REFERENCES worker (wrk_AT)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE guide(
gui_AT CHAR(10) NOT NULL,
gui_CV TEXT,
PRIMARY KEY (gui_AT),
FOREIGN KEY (gui_AT) REFERENCES worker (wrk_AT)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE languages(
lng_gui_AT CHAR(10) NOT NULL,
lng_language VARCHAR(30) NOT NULL,
PRIMARY KEY(lng_gui_AT,lng_language),
FOREIGN KEY(lng_gui_AT) REFERENCES guide (gui_AT)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE trip(
tr_id INT(11) NOT NULL AUTO_INCREMENT,
tr_departure DATETIME NOT NULL,
tr_return DATETIME NOT NULL,
tr_maxseats TINYINT(4) NOT NULL,
tr_cost FLOAT(7,2) NOT NULL,
tr_br_code INT(11) NOT NULL,
tr_gui_AT CHAR(10) NOT NULL,
tr_drv_AT CHAR(10) NOT NULL,
PRIMARY KEY(tr_id,tr_return, tr_departure),
FOREIGN KEY(tr_br_code) REFERENCES branch (br_code)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(tr_gui_AT) REFERENCES guide (gui_AT)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (tr_drv_AT) REFERENCES driver (drv_AT)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE travel_to(
to_tr_id INT(11) NOT NULL,
to_dst_id INT(11) NOT NULL,
to_arrival DATETIME NOT NULL,
to_departure DATETIME NOT NULL,
PRIMARY KEY(to_tr_id,to_dst_id),
FOREIGN KEY (to_tr_id) REFERENCES trip (tr_id),
FOREIGN KEY (to_dst_id) REFERENCES destination (dst_id)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE destination(
dst_id INT(11) NOT NULL AUTO_INCREMENT,
dst_name VARCHAR(50) NOT NULL,
dst_descr TEXT,
dst_rtype ENUM('LOCAL','ABROAD') NOT NULL,
dst_language VARCHAR(30) NOT NULL,
dst_location INT(11),
PRIMARY KEY(dst_id),
FOREIGN KEY (dst_location) REFERENCES destination (dst_id)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE reservation(
res_tr_id INT(11) NOT NULL,
res_seatnum TINYINT(4) NOT NULL,
res_name VARCHAR(20) NOT NULL,
res_lname VARCHAR(20) NOT NULL,
res_isadult ENUM('ADULT','MINOR') DEFAULT 'ADULT',
PRIMARY KEY(res_tr_id, res_seatnum),
FOREIGN KEY (res_tr_id) REFERENCES trip (tr_id)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE admin(
adm_AT CHAR(10) NOT NULL,
adm_type ENUM('LOGISTICS','ADMINISTRATIVE','ACCOUNTING') NOT NULL,
adm_diploma VARCHAR(200),
PRIMARY KEY(adm_AT),
FOREIGN KEY (adm_AT) REFERENCES worker (wrk_AT) 
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE event(
ev_tr_id INT(11) NOT NULL,
ev_start DATETIME NOT NULL,
ev_end DATETIME NOT NULL,
ev_descr TEXT,
PRIMARY KEY(ev_tr_id,ev_start),
FOREIGN KEY(ev_tr_id) REFERENCES trip (tr_id) 
ON DELETE CASCADE ON UPDATE CASCADE);

/* Μπορούμε να έχουμε πάνω απο έναν IT την ίδια χρονική περίοδο */
/* end_date είναι για όσους έχουν φύγει απο το πρακτορείο */
CREATE TABLE IT(
IT_AT CHAR(10) NOT NULL,
password VARCHAR(10) DEFAULT 'password' NOT NULL,
start_date DATETIME NOT NULL,
end_date DATETIME,
PRIMARY KEY(IT_AT),
FOREIGN KEY(IT_AT) REFERENCES worker (wrk_AT)
ON DELETE CASCADE ON UPDATE CASCADE);

CREATE TABLE offers(
offer_code INT(10) NOT NULL AUTO_INCREMENT,
from_date DATETIME NOT NULL,
to_date DATETIME NOT NULL,
cost_per_person FLOAT(7,2) NOT NULL,
destination_id INT(11) NOT NULL,
PRIMARY KEY (offer_code),
FOREIGN KEY (destination_id) REFERENCES destination (dst_id)
ON DELETE CASCADE ON UPDATE CASCADE); 

CREATE TABLE reservation_offers(
res_offer_code INT(12) NOT NULL,
cust_name VARCHAR(20) NOT NULL,
cust_lname VARCHAR(20) NOT NULL,
trip_offer_code INT(10) NOT NULL,
advance_fee FLOAT(7,2) NOT NULL,
PRIMARY KEY(res_offer_code),
FOREIGN KEY (trip_offer_code) REFERENCES offers (offer_code)
ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = MEMORY; 

CREATE INDEX idx_advance_fee ON reservation_offers(advance_fee) USING BTREE; 
CREATE INDEX idx_cust_lname ON reservation_offers(cust_lname) USING HASH;

/* Το IT_id είναι απλά ένα attribute του πίνακα ώστε να μπορούμε να διαγράψουμε έναν worker χωρίς να διαγράφεται και όποια καταγραφή του πίνακα it_logs με αυτό το wrk_id (πετάει errors αν δεν το κάνουμε έτσι */
CREATE TABLE IT_logs(
log_id INT AUTO_INCREMENT,
IT_id CHAR(10) NOT NULL, 
action VARCHAR(255),
table_name VARCHAR(255),
log_date DATETIME,
PRIMARY KEY (log_id));

// we want to create 2 tables: 1 for work misconduct and 1 for blacklisting, for workers
// only drivers or guides can be reported

CREATE TABLE misconducts(
msc_code INT AUTO_INCREMENT,
msc_wrk_AT CHAR(10) NOT NULL,
msc_wrk_name VARCHAR(20) NOT NULL,
msc_wrk_lname VARCHAR(20) NOT NULL,
msc_wrk_branch INT(11) NOT NULL,
msc_descr TEXT,
PRIMARY KEY(msc_code));

CREATE TABLE blacklist(
blk_wrk_AT CHAR(10) NOT NULL,
blk_name VARCHAR(10) NOT NULL,
blk_lname VARCHAR(10) NOT NULL,
blk_info TEXT,
PRIMARY KEY(blk_wrk_AT));